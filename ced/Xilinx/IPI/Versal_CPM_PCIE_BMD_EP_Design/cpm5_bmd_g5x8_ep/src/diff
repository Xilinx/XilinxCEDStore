==== //Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl0_g4x16_bmd/src/pcie_app_uscale_bmd_1024.sv#3 - /proj/iphd/users/surajpat/sandbox/versal/IP3_surajpat_versal_dsv/Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl0_g4x16_bmd/src/pcie_app_uscale_bmd_1024.sv ====
74c74
<    parameter         AXISTEN_IF_RQ_STRADDLE           = 0,
---
>    parameter         AXISTEN_IF_RQ_STRADDLE           = 2'b10,
==== //Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl1_g5x8_bmd/src/BMD_AXIST_RQ_1024.sv#2 - /proj/iphd/users/surajpat/sandbox/versal/IP3_surajpat_versal_dsv/Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl1_g5x8_bmd/src/BMD_AXIST_RQ_1024.sv ====
177d176
<   assign tags_all_back = tags_all_back;
==== //Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl1_g5x8_bmd/src/BMD_AXIST_RQ_RW_1024.sv#2 - /proj/iphd/users/surajpat/sandbox/versal/IP3_surajpat_versal_dsv/Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl1_g5x8_bmd/src/BMD_AXIST_RQ_RW_1024.sv ====
165c165,167
<   logic [4:0] nxt_state; 
---
>   (*make_debug*)(*keep*) logic [4:0] nxt_state; 
>   (*make_debug*)(*keep*) logic [4:0] nxt_state_wait_w; 
>   (*make_debug*)(*keep*) logic [4:0] nxt_state_wait; 
185a188
>   localparam RAW_WAIT_TAG  = 5'h16 ; //: RD after WR (WR + RD) - NEXT STATE OF IDLE
289a293,296
>   logic                         next_one_client_tag_available;
>   logic                         next_two_client_tag_available;
>   logic                         next_three_client_tag_available;
>   logic                         next_four_client_tag_available;
348a356,359
>    assign next_one_client_tag_available   =  next_client_tag_available[0];
>    assign next_two_client_tag_available   = &next_client_tag_available[1:0];
>    assign next_three_client_tag_available = &next_client_tag_available[2:0];
>    assign next_four_client_tag_available  = &next_client_tag_available[3:0];
1335c1346
<                              if ( &next_client_tag_available[3:0] ) begin 
---
>                              if ( next_four_client_tag_available ) begin 
1564c1575
<                              if ( &next_client_tag_available[1:0] ) begin 
---
>                              if ( next_two_client_tag_available ) begin 
1701c1712
<                              if ( &next_client_tag_available[1:0] ) begin 
---
>                              //if ( next_two_client_tag_available ) begin 
1705c1716
<                                    nxt_state = DONE; 
---
>                                    nxt_state_wait_w = DONE; 
1712c1723
<                                              nxt_state = WR_32DW_DW0;
---
>                                              nxt_state_wait_w = WR_32DW_DW0;
1718c1729
<                                              nxt_state = WR_16DW_DW0;
---
>                                              nxt_state_wait_w = WR_16DW_DW0;
1722c1733
<                                              nxt_state = WR_8DW;
---
>                                              nxt_state_wait_w = WR_8DW;
1735c1746
<                                                nxt_state = WR_SMALL_2;
---
>                                                nxt_state_wait_w = WR_SMALL_2;
1739c1750
<                                                nxt_state = WR_SMALL_4;
---
>                                                nxt_state_wait_w = WR_SMALL_4;
1749c1760
<                                            nxt_state = WR_32DW_DW0;
---
>                                            nxt_state_wait_w = WR_32DW_DW0;
1756c1767
<                                            nxt_state = WR_16DW_DW0;
---
>                                            nxt_state_wait_w = WR_16DW_DW0;
1761c1772
<                                            nxt_state = WR_8DW;
---
>                                            nxt_state_wait_w = WR_8DW;
1776c1787
<                                                nxt_state = RAW;
---
>                                                nxt_state_wait_w = RAW;
1783c1794
<                                              nxt_state = WR_SMALL_4;
---
>                                              nxt_state_wait_w = WR_SMALL_4;
1794c1805
<                                            nxt_state = WAR_1HDR;
---
>                                            nxt_state_wait_w = WAR_1HDR;
1806c1817
<                                            nxt_state = WAR_2HDR;
---
>                                            nxt_state_wait_w = WAR_2HDR;
1815c1826
<                                  nxt_state = RD_ONLY_2;
---
>                                  nxt_state_wait_w = RD_ONLY_2;
1820c1831
<                                  nxt_state = RD_ONLY_4;
---
>                                  nxt_state_wait_w = RD_ONLY_4;
1824a1836,1837
> 			       nxt_state = next_two_client_tag_available ? nxt_state_wait_w : RAW_WAIT_TAG;
> 
1827c1840
<                                r_tcnt_w            = r_tcnt + 2;
---
>                                r_tcnt_w            = next_two_client_tag_available ? (r_tcnt + 2) : r_tcnt;
1829c1842
<                                if (AXISTEN_IF_ENABLE_CLIENT_TAG) begin
---
>                                if (next_two_client_tag_available && AXISTEN_IF_ENABLE_CLIENT_TAG) begin
1831a1845,1846
>                                  client_tag_assigned_2_wire           = 1'b0;
>                                  client_tag_assigned_3_wire           = 1'b0;
1843a1859,1862
>                                  client_tag_assigned_0_wire           = 1'b0;
>                                  client_tag_assigned_1_wire           = 1'b0;
>                                  client_tag_assigned_2_wire           = 1'b0;
>                                  client_tag_assigned_3_wire           = 1'b0;
1860,1865c1879,1884
<                                s_axis_rq_tdata_w.h_3.req_type       = 4'b0000; // MemRd
<                                s_axis_rq_tdata_w.h_3.dword_count    = mrd_len_i;
<                                s_axis_rq_tdata_w.h_3.addr_63_2      = {32'd0, rd_addr_31_2_1};
<                                s_axis_rq_tdata_w.h_2.req_type       = 4'b0000; // MemRd
<                                s_axis_rq_tdata_w.h_2.dword_count    = mrd_len_i;
<                                s_axis_rq_tdata_w.h_2.addr_63_2      = {32'd0, rd_addr_31_2_0};
---
>                                s_axis_rq_tdata_w.h_3.req_type       = next_two_client_tag_available ?  4'b0000                : 'd0 ; // MemRd 
>                                s_axis_rq_tdata_w.h_3.dword_count    = next_two_client_tag_available ?  mrd_len_i              : 'd0 ;          
>                                s_axis_rq_tdata_w.h_3.addr_63_2      = next_two_client_tag_available ?  {32'd0, rd_addr_31_2_1}: 'd0 ;          
>                                s_axis_rq_tdata_w.h_2.req_type       = next_two_client_tag_available ?  4'b0000                : 'd0 ; // MemRd 
>                                s_axis_rq_tdata_w.h_2.dword_count    = next_two_client_tag_available ?  mrd_len_i              : 'd0 ;          
>                                s_axis_rq_tdata_w.h_2.addr_63_2      = next_two_client_tag_available ?  {32'd0, rd_addr_31_2_0}: 'd0 ;          
1891,1892c1910,1911
<                                                   s_axis_rq_tuser_w.is_sop3_ptr = 2'b11; 
<                                                   s_axis_rq_tuser_w.is_sop2_ptr = 2'b10; 
---
>                                                   s_axis_rq_tuser_w.is_sop3_ptr = next_two_client_tag_available ? 2'b11 : 2'b00; 
>                                                   s_axis_rq_tuser_w.is_sop2_ptr = next_two_client_tag_available ? 2'b10 : 2'b00; 
1895,1897c1914,1916
<                                                   s_axis_rq_tuser_w.is_sop      = 4'b1111; 
<                                                   s_axis_rq_tuser_w.is_eop3_ptr = 5'b11011; // RD ends DW 27
<                                                   s_axis_rq_tuser_w.is_eop2_ptr = 5'b10011; // RD ends DW 19
---
>                                                   s_axis_rq_tuser_w.is_sop      = next_two_client_tag_available ? 4'b1111 : 4'b0011;
>                                                   s_axis_rq_tuser_w.is_eop3_ptr = next_two_client_tag_available ? 5'b11011 : 5'b0; // RD ends DW 27
>                                                   s_axis_rq_tuser_w.is_eop2_ptr = next_two_client_tag_available ? 5'b10011 : 5'b0; // RD ends DW 19
1900,1901c1919,1920
<                                                   s_axis_rq_tuser_w.is_eop      = 4'b1111;  
<                                                   s_axis_rq_tuser_w.last_be[15:8] = mrd_len_i[0] ? 8'h0 : 8'hFF; 
---
>                                                   s_axis_rq_tuser_w.is_eop      = next_two_client_tag_available ? 4'b1111 : 4'b0011;  
>                                                   s_axis_rq_tuser_w.last_be[15:8] = next_two_client_tag_available ? (mrd_len_i[0] ? 8'h0 : 8'hFF) : 8'h0; 
1903c1922
<                                                   s_axis_rq_tuser_w.first_be    = 16'hFFFF; 
---
>                                                   s_axis_rq_tuser_w.first_be    = next_two_client_tag_available ? 16'hFFFF : 16'h00FF; 
1915,1916c1934,1935
<                                                   s_axis_rq_tuser_w.is_eop2_ptr = 5'b11011; // DW 27 
<                                                   s_axis_rq_tuser_w.is_eop1_ptr = 5'b10011; // DW 19
---
>                                                   s_axis_rq_tuser_w.is_eop2_ptr = next_two_client_tag_available ? 5'b11011 : 5'b0; // DW 27 
>                                                   s_axis_rq_tuser_w.is_eop1_ptr = next_two_client_tag_available ? 5'b10011 : 5'b0; // DW 19
1918c1937
<                                                   s_axis_rq_tuser_w.is_eop      = 4'b0111;  // 1WR + 2RD eop  
---
>                                                   s_axis_rq_tuser_w.is_eop      = next_two_client_tag_available ? 4'b0111 : 4'b0001;  // 1WR + 2RD eop  
1920,1921c1939,1940
<                                                   s_axis_rq_tuser_w.is_sop2_ptr = 2'b11 ;   // DW24
<                                                   s_axis_rq_tuser_w.is_sop1_ptr = 2'b10 ;   // DW16
---
>                                                   s_axis_rq_tuser_w.is_sop2_ptr = next_two_client_tag_available ? 2'b11 : 2'b00;   // DW24
>                                                   s_axis_rq_tuser_w.is_sop1_ptr = next_two_client_tag_available ? 2'b10 : 2'b00;   // DW16
1923,1925c1942,1944
<                                                   s_axis_rq_tuser_w.is_sop      = 4'b0111;  // 8DW -> WR sop + 2 RD sop    
<                                                   s_axis_rq_tuser_w.last_be     = mrd_len_i[0] ? 16'hF : 16'hFFF; 
<                                                   s_axis_rq_tuser_w.first_be    = 16'h0FFF; // 3 sop 
---
>                                                   s_axis_rq_tuser_w.is_sop      = next_two_client_tag_available ? 4'b0111 : 4'b0001;  // 8DW -> WR sop + 2 RD sop    
>                                                   s_axis_rq_tuser_w.last_be     = next_two_client_tag_available ? (mrd_len_i[0] ? 16'hF : 16'hFFF) : 16'hF; 
>                                                   s_axis_rq_tuser_w.first_be    = next_two_client_tag_available ? 16'h0FFF : 16'h000F; // 3 sop 
1931,1932c1950,1951
<                                                   s_axis_rq_tuser_w.is_eop2_ptr = 5'b11011; // DW 27 
<                                                   s_axis_rq_tuser_w.is_eop1_ptr = 5'b10011; // DW 19
---
>                                                   s_axis_rq_tuser_w.is_eop2_ptr = next_two_client_tag_available ? 5'b11011 : 5'b0; // DW 27 
>                                                   s_axis_rq_tuser_w.is_eop1_ptr = next_two_client_tag_available ? 5'b10011 : 5'b0; // DW 19
1934c1953
<                                                   s_axis_rq_tuser_w.is_eop      = 4'b0111;  // 1WR + 2RD eop  
---
>                                                   s_axis_rq_tuser_w.is_eop      = next_two_client_tag_available ? 4'b0111 : 4'b0001;  // 1WR + 2RD eop  
1937,1941c1956,1960
<                                                   s_axis_rq_tuser_w.is_sop1_ptr = 2'b11;    // DW24
<                                                   s_axis_rq_tuser_w.is_sop0_ptr = 2'b10;    // DW16
<                                                   s_axis_rq_tuser_w.is_sop      = 4'b0011;  // 2 RD sop    
<                                                   s_axis_rq_tuser_w.last_be     = mrd_len_i[0] ? 16'h0 : 16'h0FF; // sop are for read 
<                                                   s_axis_rq_tuser_w.first_be    = 16'h00FF; // 2 sop
---
>                                                   s_axis_rq_tuser_w.is_sop1_ptr = next_two_client_tag_available ? 2'b11 : 2'b00;    // DW24
>                                                   s_axis_rq_tuser_w.is_sop0_ptr = next_two_client_tag_available ? 2'b10 : 2'b00;    // DW16
>                                                   s_axis_rq_tuser_w.is_sop      = next_two_client_tag_available ? 4'b0011 : 4'b0000;  // 2 RD sop    
>                                                   s_axis_rq_tuser_w.last_be     = next_two_client_tag_available ? (mrd_len_i[0] ? 16'h0 : 16'h0FF ) : 16'h0; // sop are for read 
>                                                   s_axis_rq_tuser_w.first_be    = next_two_client_tag_available ? 16'h00FF : 16'h0000; // 2 sop
1943a1963,2048
> 			       waiting_for_next_tag          = next_two_client_tag_available ? 1'b0 : 1'b1;
>                              //end // no available tag
> 			     //else begin
>                              //  client_tag_assigned_0_wire    = 1'b0;
>                              //  client_tag_assigned_1_wire    = 1'b0;
>                              //  client_tag_assigned_2_wire    = 1'b0;
>                              //  client_tag_assigned_3_wire    = 1'b0;
> 			     //  waiting_for_next_tag          = 'b1;
>                              //  s_axis_rq_tvalid_w            = 1'b0; // Pull down the valid if tag is not available
> 			     //end
>                            end //if(s_axis_rq_tready) begin
>                          end // state RAW
> 
>           RAW_WAIT_TAG   : begin // SAME logic as RD_ONLY_4
>                            if(s_axis_rq_tready) begin
>                              //if ( ( avail_client_tag[client_tag_assigned_num_10bit_0] 
>                              //     & avail_client_tag[client_tag_assigned_num_10bit_1]) 
>                              //    | ~AXISTEN_IF_ENABLE_CLIENT_TAG) begin
>                              if ( next_two_client_tag_available ) begin 
>                                nxt_state = nxt_state_wait; 
> 			       
> 			       r_tcnt_w            = r_tcnt + 2;
> 
>                                if (AXISTEN_IF_ENABLE_CLIENT_TAG) begin
>                                  client_tag_assigned_0_wire           = 1'b1;
>                                  client_tag_assigned_1_wire           = 1'b1;
>                                  client_tag_assigned_2_wire           = 1'b0;
>                                  client_tag_assigned_3_wire           = 1'b0;
>                                  client_tag_assigned_num_0_wire       = incr_tag(cfg_10b_tag_requester_enable, client_tag_assigned_num_10bit_0, 2);
>                                  client_tag_assigned_num_1_wire       = incr_tag(cfg_10b_tag_requester_enable, client_tag_assigned_num_10bit_1, 2);
>                                  client_tag_assigned_num_2_wire       = incr_tag(cfg_10b_tag_requester_enable, client_tag_assigned_num_10bit_2, 2);
>                                  client_tag_assigned_num_3_wire       = incr_tag(cfg_10b_tag_requester_enable, client_tag_assigned_num_10bit_3, 2);
>                                  s_axis_rq_tdata_w.h_0.tag            = client_tag_assigned_num_10bit_0[7:0];
>                                  s_axis_rq_tdata_w.h_0.req_id_en      = client_tag_assigned_num_10bit_0[8];
>                                  s_axis_rq_tdata_w.h_0.force_ecrc     = client_tag_assigned_num_10bit_0[9];
>                                  s_axis_rq_tdata_w.h_1.tag            = client_tag_assigned_num_10bit_1[7:0];
>                                  s_axis_rq_tdata_w.h_1.req_id_en      = client_tag_assigned_num_10bit_1[8];
>                                  s_axis_rq_tdata_w.h_1.force_ecrc     = client_tag_assigned_num_10bit_1[9];
>                                end
> 			       else begin
>                                  s_axis_rq_tdata_w.h_0.tag            = 'd0; 
>                                  s_axis_rq_tdata_w.h_0.req_id_en      = 'd0; 
>                                  s_axis_rq_tdata_w.h_0.force_ecrc     = 'd0; 
>                                  s_axis_rq_tdata_w.h_1.tag            = 'd0; 
>                                  s_axis_rq_tdata_w.h_1.req_id_en      = 'd0; 
>                                  s_axis_rq_tdata_w.h_1.force_ecrc     = 'd0; 
> 			       end
> 
> 
>                                //**** RQ Interface **** //
>                                s_axis_rq_tvalid_w               = 1'b1;
>                                s_axis_rq_tlast_w                = 1'b0;  //tlast/tkeep not used in straddle 
>                                s_axis_rq_tkeep_w                = 32'h0; //tlast/tkeep not used in straddle 
> 
>                                s_axis_rq_tdata_w[1023:512]          = 'd0; 
>                                s_axis_rq_tdata_w.h_1.req_type       = 4'b0000; // MemRd
>                                s_axis_rq_tdata_w.h_1.dword_count    = mrd_len_i;
>                                s_axis_rq_tdata_w.h_1.addr_63_2      = {32'd0, rd_addr_31_2_1};
>                                s_axis_rq_tdata_w.h_0.req_type       = 4'b0000; // MemRd
>                                s_axis_rq_tdata_w.h_0.dword_count    = mrd_len_i;
>                                s_axis_rq_tdata_w.h_0.addr_63_2      = {32'd0, rd_addr_31_2_0};
>                                // clear tdata to zero
>                                s_axis_rq_tdata_w.h_1.addr_type       = 2'b0;
>                                s_axis_rq_tdata_w.h_1[95:79]          = 'd0; // req_id, poisoned_req
>                                s_axis_rq_tdata_w.h_1[119:104]        = 'd0; // cmpl_id
>                                s_axis_rq_tdata_w.h_1[126:121]        = 'd0; // attr, tc 
>                                s_axis_rq_tdata_w.h_0.addr_type       = 2'b0;
>                                s_axis_rq_tdata_w.h_0[95:79]          = 'd0; // req_id, poisoned_req
>                                s_axis_rq_tdata_w.h_0[119:104]        = 'd0; // cmpl_id
>                                s_axis_rq_tdata_w.h_0[126:121]        = 'd0; // attr, tc 
>                                s_axis_rq_tdata_w.d_1       = 128'b0;
>                                s_axis_rq_tdata_w.d_0       = 128'b0;
> 
>                                s_axis_rq_tuser_w.is_eop3_ptr = 5'b00000;  
>                                s_axis_rq_tuser_w.is_eop2_ptr = 5'b00000;  
>                                s_axis_rq_tuser_w.is_eop1_ptr = 5'b01011;  // DW11
>                                s_axis_rq_tuser_w.is_eop0_ptr = 5'b00011;  // DW3
>                                s_axis_rq_tuser_w.is_eop      = 4'b0011;   
>                                s_axis_rq_tuser_w.is_sop3_ptr = 2'b00;     
>                                s_axis_rq_tuser_w.is_sop2_ptr = 2'b00;     
>                                s_axis_rq_tuser_w.is_sop1_ptr = 2'b01;     // DW8
>                                s_axis_rq_tuser_w.is_sop0_ptr = 2'b00;     // DW0
>                                s_axis_rq_tuser_w.is_sop      = 4'b0011;    
>                                s_axis_rq_tuser_w.last_be     = (mrd_len_i[0]) ? 16'h0 : 16'h00FF;  
>                                s_axis_rq_tuser_w.first_be    = 16'h00FF; 
>  
1954c2059,2060
<                          end // state RAW
---
>                          end // state RAW_WAIT_TAG
> 
1961c2067
<                              if ( &next_client_tag_available[1:0] ) begin 
---
>                              if ( next_two_client_tag_available ) begin 
2086c2192
<                              if ( &next_client_tag_available[1:0] ) begin 
---
>                              if ( next_two_client_tag_available ) begin 
2370c2476
<                              if ( next_client_tag_available[0] ) begin
---
>                              if ( next_one_client_tag_available ) begin
2500a2607
>    `BMDREG(user_clk, (reset_n & ~init_rst_i), nxt_state_wait     , nxt_state_wait_w  , IDLE)
==== //Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl1_g5x8_bmd/src/pcie_app_uscale_bmd_1024.sv#2 - /proj/iphd/users/surajpat/sandbox/versal/IP3_surajpat_versal_dsv/Tests/HEAD/dsv/PCIe/versal_dev/cpm5/h10eval_cpm5_pcie_ctrl1_g5x8_bmd/src/pcie_app_uscale_bmd_1024.sv ====
68,71c68,71
<    //parameter         RQ_AVAIL_TAG_IDX                 = TAG_10B_SUPPORT_EN == "TRUE" ? 9 : 8,
<    //parameter         RQ_AVAIL_TAG                     = TAG_10B_SUPPORT_EN == "TRUE" ? 512 : 256,
<    parameter         RQ_AVAIL_TAG_IDX                 = TAG_10B_SUPPORT_EN == "TRUE" ? 10 : 8,
<    parameter         RQ_AVAIL_TAG                     = TAG_10B_SUPPORT_EN == "TRUE" ? 1024 : 256,
---
>    parameter         RQ_AVAIL_TAG_IDX                 = TAG_10B_SUPPORT_EN == "TRUE" ? 9 : 8,
>    parameter         RQ_AVAIL_TAG                     = TAG_10B_SUPPORT_EN == "TRUE" ? 512 : 256,
>    //parameter         RQ_AVAIL_TAG_IDX                 = TAG_10B_SUPPORT_EN == "TRUE" ? 10 : 8,
>    //parameter         RQ_AVAIL_TAG                     = TAG_10B_SUPPORT_EN == "TRUE" ? 1024 : 256,
74c74
<    parameter         AXISTEN_IF_RQ_STRADDLE           = 0,
---
>    parameter         AXISTEN_IF_RQ_STRADDLE           = 2'b10,
