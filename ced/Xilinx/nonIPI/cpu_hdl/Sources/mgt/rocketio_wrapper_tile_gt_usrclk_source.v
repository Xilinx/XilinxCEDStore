///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 1.5
//  \   \         Application : 7 Series FPGAs Transceivers  Wizard
//  /   /         Filename : rocketio_wrapper_tile_gt_usrclk_source.v
// /___/   /\      
// \   \  /  \ 
//  \___\/\___\ 
//
//
// Module ROCKETIO_WRAPPER_TILE_GT_USRCLK_SOURCE (for use with GTs)
// Generated by Xilinx 7 Series FPGAs Transceivers Wizard
// 
// 
// (c) Copyright 2010-2011 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 


`timescale 1ns / 1ps

//***********************************Entity Declaration*******************************
module ROCKETIO_WRAPPER_TILE_GT_USRCLK_SOURCE 
(
    input  wire  Q0_CLK0_GTREFCLK_PAD_N_IN,
    input  wire  Q0_CLK0_GTREFCLK_PAD_P_IN,
    output wire  Q0_CLK0_GTREFCLK_OUT,
    input  wire  Q0_CLK1_GTREFCLK_PAD_N_IN,
    input  wire  Q0_CLK1_GTREFCLK_PAD_P_IN,
    output wire  Q0_CLK1_GTREFCLK_OUT,
    input  wire  Q1_CLK0_GTREFCLK_PAD_N_IN,
    input  wire  Q1_CLK0_GTREFCLK_PAD_P_IN,
    output wire  Q1_CLK0_GTREFCLK_OUT,
    input  wire  Q1_CLK1_GTREFCLK_PAD_N_IN,
    input  wire  Q1_CLK1_GTREFCLK_PAD_P_IN,
    output wire  Q1_CLK1_GTREFCLK_OUT,
 
    output          GT0_TXUSRCLK_OUT,
    output          GT0_TXUSRCLK2_OUT,
    input           GT0_TXOUTCLK_IN,
    output          GT0_RXUSRCLK_OUT,
    output          GT0_RXUSRCLK2_OUT,
    input           GT0_RXOUTCLK_IN,
 
    output          GT1_TXUSRCLK_OUT,
    output          GT1_TXUSRCLK2_OUT,
    input           GT1_TXOUTCLK_IN,
    output          GT1_RXUSRCLK_OUT,
    output          GT1_RXUSRCLK2_OUT,
    input           GT1_RXOUTCLK_IN,
 
    output          GT2_TXUSRCLK_OUT,
    output          GT2_TXUSRCLK2_OUT,
    input           GT2_TXOUTCLK_IN,
    output          GT2_RXUSRCLK_OUT,
    output          GT2_RXUSRCLK2_OUT,
    input           GT2_RXOUTCLK_IN,
 
    output          GT3_TXUSRCLK_OUT,
    output          GT3_TXUSRCLK2_OUT,
    input           GT3_TXOUTCLK_IN,
    output          GT3_RXUSRCLK_OUT,
    output          GT3_RXUSRCLK2_OUT,
    input           GT3_RXOUTCLK_IN,
 
    output          GT4_TXUSRCLK_OUT,
    output          GT4_TXUSRCLK2_OUT,
    input           GT4_TXOUTCLK_IN,
    output          GT4_RXUSRCLK_OUT,
    output          GT4_RXUSRCLK2_OUT,
    input           GT4_RXOUTCLK_IN,
 
    output          GT5_TXUSRCLK_OUT,
    output          GT5_TXUSRCLK2_OUT,
    input           GT5_TXOUTCLK_IN,
    output          GT5_RXUSRCLK_OUT,
    output          GT5_RXUSRCLK2_OUT,
    input           GT5_RXOUTCLK_IN,
 
    output          GT6_TXUSRCLK_OUT,
    output          GT6_TXUSRCLK2_OUT,
    input           GT6_TXOUTCLK_IN,
    output          GT6_RXUSRCLK_OUT,
    output          GT6_RXUSRCLK2_OUT,
    input           GT6_RXOUTCLK_IN,
 
    output          GT7_TXUSRCLK_OUT,
    output          GT7_TXUSRCLK2_OUT,
    input           GT7_TXOUTCLK_IN,
    output          GT7_RXUSRCLK_OUT,
    output          GT7_RXUSRCLK2_OUT,
    input           GT7_RXOUTCLK_IN,
    input	    DRPCLK_IN,
    output          DRPCLK_OUT

);


`define DLY #1

//*********************************Wire Declarations**********************************

    wire            tied_to_ground_i;
    wire            tied_to_vcc_i;
 
    wire            gt0_txoutclk_i; 
    wire            gt0_rxoutclk_i;
 
    wire            gt1_txoutclk_i; 
    wire            gt1_rxoutclk_i;
 
    wire            gt2_txoutclk_i; 
    wire            gt2_rxoutclk_i;
 
    wire            gt3_txoutclk_i; 
    wire            gt3_rxoutclk_i;
 
    wire            gt4_txoutclk_i; 
    wire            gt4_rxoutclk_i;
 
    wire            gt5_txoutclk_i; 
    wire            gt5_rxoutclk_i;
 
    wire            gt6_txoutclk_i; 
    wire            gt6_rxoutclk_i;
 
    wire            gt7_txoutclk_i; 
    wire            gt7_rxoutclk_i;
    
    wire  q0_clk0_gtrefclk;
    
    wire  q0_clk1_gtrefclk;
    
    wire  q1_clk0_gtrefclk;
    
    wire  q1_clk1_gtrefclk;

    wire            gt0_txusrclk_i;
    wire            gt2_txusrclk_i;
    wire            gt4_txusrclk_i;
    wire            gt6_txusrclk_i;


//*********************************** Beginning of Code *******************************

    //  Static signal Assigments    
    assign tied_to_ground_i             = 1'b0;
    assign tied_to_vcc_i                = 1'b1;
    assign gt0_txoutclk_i = GT0_TXOUTCLK_IN;
    assign gt0_rxoutclk_i = GT0_RXOUTCLK_IN;
    assign gt1_txoutclk_i = GT1_TXOUTCLK_IN;
    assign gt1_rxoutclk_i = GT1_RXOUTCLK_IN;
    assign gt2_txoutclk_i = GT2_TXOUTCLK_IN;
    assign gt2_rxoutclk_i = GT2_RXOUTCLK_IN;
    assign gt3_txoutclk_i = GT3_TXOUTCLK_IN;
    assign gt3_rxoutclk_i = GT3_RXOUTCLK_IN;
    assign gt4_txoutclk_i = GT4_TXOUTCLK_IN;
    assign gt4_rxoutclk_i = GT4_RXOUTCLK_IN;
    assign gt5_txoutclk_i = GT5_TXOUTCLK_IN;
    assign gt5_rxoutclk_i = GT5_RXOUTCLK_IN;
    assign gt6_txoutclk_i = GT6_TXOUTCLK_IN;
    assign gt6_rxoutclk_i = GT6_RXOUTCLK_IN;
    assign gt7_txoutclk_i = GT7_TXOUTCLK_IN;
    assign gt7_rxoutclk_i = GT7_RXOUTCLK_IN;
     
    assign Q0_CLK0_GTREFCLK_OUT = q0_clk0_gtrefclk;
    assign Q0_CLK1_GTREFCLK_OUT = q0_clk1_gtrefclk;
    assign Q1_CLK0_GTREFCLK_OUT = q1_clk0_gtrefclk;
    assign Q1_CLK1_GTREFCLK_OUT = q1_clk1_gtrefclk;

    //IBUFDS_GTE2
    IBUFDS_GTE2 ibufds_instQ0_CLK0  
    (
        .O               (q0_clk0_gtrefclk),
        .ODIV2           (),
        .CEB             (tied_to_ground_i),
        .I               (Q0_CLK0_GTREFCLK_PAD_P_IN),
        .IB              (Q0_CLK0_GTREFCLK_PAD_N_IN)
    );
    //IBUFDS_GTE2
    IBUFDS_GTE2 ibufds_instQ0_CLK1  
    (
        .O               (q0_clk1_gtrefclk),
        .ODIV2           (),
        .CEB             (tied_to_ground_i),
        .I               (Q0_CLK1_GTREFCLK_PAD_P_IN),
        .IB              (Q0_CLK1_GTREFCLK_PAD_N_IN)
    );
    //IBUFDS_GTE2
    IBUFDS_GTE2 ibufds_instQ1_CLK0  
    (
        .O               (q1_clk0_gtrefclk),
        .ODIV2           (),
        .CEB             (tied_to_ground_i),
        .I               (Q1_CLK0_GTREFCLK_PAD_P_IN),
        .IB              (Q1_CLK0_GTREFCLK_PAD_N_IN)
    );
    //IBUFDS_GTE2
    IBUFDS_GTE2 ibufds_instQ1_CLK1  
    (
        .O               (q1_clk1_gtrefclk),
        .ODIV2           (),
        .CEB             (tied_to_ground_i),
        .I               (Q1_CLK1_GTREFCLK_PAD_P_IN),
        .IB              (Q1_CLK1_GTREFCLK_PAD_N_IN)
    );

    //BUFG
    BUFG bufg_inst 
    (
        .I                              (DRPCLK_IN),
        .O                              (DRPCLK_OUT) 
    );


    // Instantiate a MMCM module to divide the reference clock. Uses internal feedback
    // for improved jitter performance, and to avoid consuming an additional BUFG

    BUFG txoutclk_bufg0_i
    (
        .I                              (gt0_txoutclk_i),
        .O                              (gt0_txusrclk_i)
    );


    BUFG txoutclk_bufg1_i
    (
        .I                              (gt2_txoutclk_i),
        .O                              (gt2_txusrclk_i)
    );


    BUFG txoutclk_bufg2_i
    (
        .I                              (gt4_txoutclk_i),
        .O                              (gt4_txusrclk_i)
    );


    BUFG txoutclk_bufg3_i
    (
        .I                              (gt6_txoutclk_i),
        .O                              (gt6_txusrclk_i)
    );




 
    assign GT0_TXUSRCLK_OUT = gt0_txusrclk_i;
    assign GT0_TXUSRCLK2_OUT = gt0_txusrclk_i;
    assign GT0_RXUSRCLK_OUT = gt0_txusrclk_i;
    assign GT0_RXUSRCLK2_OUT = gt0_txusrclk_i;
 
    assign GT1_TXUSRCLK_OUT = gt0_txusrclk_i;
    assign GT1_TXUSRCLK2_OUT = gt0_txusrclk_i;
    assign GT1_RXUSRCLK_OUT = gt0_txusrclk_i;
    assign GT1_RXUSRCLK2_OUT = gt0_txusrclk_i;
 
    assign GT2_TXUSRCLK_OUT = gt2_txusrclk_i;
    assign GT2_TXUSRCLK2_OUT = gt2_txusrclk_i;
    assign GT2_RXUSRCLK_OUT = gt2_txusrclk_i;
    assign GT2_RXUSRCLK2_OUT = gt2_txusrclk_i;
 
    assign GT3_TXUSRCLK_OUT = gt2_txusrclk_i;
    assign GT3_TXUSRCLK2_OUT = gt2_txusrclk_i;
    assign GT3_RXUSRCLK_OUT = gt2_txusrclk_i;
    assign GT3_RXUSRCLK2_OUT = gt2_txusrclk_i;
 
    assign GT4_TXUSRCLK_OUT = gt4_txusrclk_i;
    assign GT4_TXUSRCLK2_OUT = gt4_txusrclk_i;
    assign GT4_RXUSRCLK_OUT = gt4_txusrclk_i;
    assign GT4_RXUSRCLK2_OUT = gt4_txusrclk_i;
 
    assign GT5_TXUSRCLK_OUT = gt4_txusrclk_i;
    assign GT5_TXUSRCLK2_OUT = gt4_txusrclk_i;
    assign GT5_RXUSRCLK_OUT = gt4_txusrclk_i;
    assign GT5_RXUSRCLK2_OUT = gt4_txusrclk_i;
 
    assign GT6_TXUSRCLK_OUT = gt6_txusrclk_i;
    assign GT6_TXUSRCLK2_OUT = gt6_txusrclk_i;
    assign GT6_RXUSRCLK_OUT = gt6_txusrclk_i;
    assign GT6_RXUSRCLK2_OUT = gt6_txusrclk_i;
 
    assign GT7_TXUSRCLK_OUT = gt6_txusrclk_i;
    assign GT7_TXUSRCLK2_OUT = gt6_txusrclk_i;
    assign GT7_RXUSRCLK_OUT = gt6_txusrclk_i;
    assign GT7_RXUSRCLK2_OUT = gt6_txusrclk_i;

endmodule

